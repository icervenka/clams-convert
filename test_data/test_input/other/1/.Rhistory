night_start
night_start[1:2]
night_start[1:2]
night_start
substr(night_start, 1, 2)
runApp('Google Drive/programming/fwr')
night_start
runApp('Google Drive/programming/fwr')
night_start
runApp('Google Drive/programming/fwr')
night_start
runApp('Google Drive/programming/fwr')
night_start
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
x
x
night_start
"18:20:00" + 14
chron(14)
"18:20:00" + "14:00:00"
difftime("18:20:00", "14:00:00")
difftime("18:20:00", "14:00:00", units = "hours")
difftime(18, 14, units = "hours")
as.difftime(c("0:3:20", "11:23:15"))
as.difftime(c("0:3:20", "11:23:15"), units = "hours")
as.character(as.difftime(c("0:3:20", "11:23:15"), units = "hours"))
as.numeric(c("0:3:20", "11:23:15"), units = "hours"), units = "hours")
format(as.difftime(c("0:3:20", "11:23:15"), units = "hours"))
format(as.difftime(c("0:3:20", "11:23:15"), units = "seconds"))
format(as.difftime(c("0:3:20", "11:23:15"), units = "secs"))
as.difftime(c("0:3:20", "11:23:15"), units = "secs")
runApp('Google Drive/programming/fwr')
x
chron::seconds(x)
x
night_start
as.difftime(c(nigh_start, "00:00:00"))
as.difftime(c("18:00:00", "00:00:00"))
as.difftime(c("18:00:00", "00:00:00"), unit = "secs")[1]
as.numeric(as.difftime(c("18:00:00", "00:00:00"), unit = "secs")[1])
as.numeric(as.difftime(c("6:00:00", "00:00:00"), unit = "secs")[1])
as.numeric(as.difftime(c("6:00:00", "00:00:00"), unit = "secs"))
as.numeric(as.difftime(c("12:00:00", "00:00:00"), unit = "secs")[1])
chron::hours(24000)
chron::format(24000)
format(24000)
format.chron(24000)
?strptime
strptime(24000, %H:%M:%S)
strptime(24000, "%H:%M:%S")
times(24000)
as.POSIXct(24000)
as.POSIXct(24000, "%I:%M:%S )
as.POSIXct(24000, "%I:%M:%S")
as.POSIXct(24000, "%I:%M:%S", '0001-01-01 00:00:00')
as.POSIXct(24000, "%I:%M:%S", origin =  '0001-01-01 00:00:00')
as.POSIXct(24000, "%I:%M:%S")
as.POSIXlt(24000, "%I:%M:%S")
Sys.setlocale(category = "LC_TIME", locale = "US")
as.POSIXlt(24000, "%I:%M:%S")
format(as.POSIXct('0001-01-01 00:00:00') + 24000, "%I:%M:%S)
)
)
format(as.POSIXct('0001-01-01 00:00:00') + 24000, "%I:%M:%S))
format(as.POSIXct('0001-01-01 00:00:00') + 24000, "%I:%M:%S"))
format(as.POSIXct('0001-01-01 00:00:00') + 24000, "%I:%M:%S")
format(as.POSIXct('0001-01-01 00:00:00') + 21600, "%I:%M:%S")
times(20000)
as.numeric(times(20000))
as.numeric(times("16:00:00"))
24*60*as.numeric(times("16:00:00"))
24*60*60*as.numeric(times("16:00:00"))
runApp('Google Drive/programming/fwr')
x
(as.numeric(as.difftime(c(night_start, "00:00:00")
)
)
)
as.difftime(c(night_start, "00:00:00"))
runApp('Google Drive/programming/fwr')
x
night_start
runApp('Google Drive/programming/fwr')
night_start
runApp()
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
as.difftime(c(night_start, "00:00:00"))
as.difftime(c(night_start, "00:00:00"), unit = "secs")
as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]
as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1])
night_duration
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
?grepl
runApp('Google Drive/programming/fwr')
grepl("[0-2][:digit:]{2}[0-2][:digit:]", "18:00:00")
grepl("[0-2]", 0)
grepl("[0-2]", 2)
grepl("([0-2][:digit:]:){2}[0-2][:digit:]", "18:00:00")
grepl("([0-2][:digit:]\:){2}[0-2][:digit:]", "18:00:00")
grepl("([0-1][0-9]|2[0-3]):[0-5][0-9]", "18:59")
grepl("([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]", "18:59:60")
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
grepl("[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]", "1:00:00")
grepl("[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]", "0:00:00")
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "0:00:00")
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "18:00:00")
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "10:00:00")
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "9:00:00")
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "09:00:00")
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
first_phase_change_dt
phase_change_time
init_phase_count
first_phase_change_dt - phase_change_time
tms
first_phase_change_dt - "13:00:00"
phase
runApp('Google Drive/programming/fwr')
phase_change_time
first_phase_change_dt - phase_change_time
first_phase_change_dt
as.character(first_phase_change_dt - phase_change_time)
tms
tms[1] - as.character(first_phase_change_dt - phase_change_time)
tms[1]
tms[1] + as.character(first_phase_change_dt - phase_change_time)
tms[1] - abs(as.character(first_phase_change_dt - phase_change_time))
as.character(first_phase_change_dt - phase_change_time)
as.character(first_phase_change_dt - 10:00:00)
first_phase_change_dt
as.character(first_phase_change_dt - "10:00:00")
as.character(first_phase_change_dt - "20:00:00")
as.character(first_phase_change_dt - "01:00:00")
tms - as.character(first_phase_change_dt - "01:00:00")
tms - as.character(first_phase_change_dt - "02:00:00")
tms + as.character(first_phase_change_dt - "02:00:00")
tms + as.character(first_phase_change_dt - "01:00:00")
tms - as.character(first_phase_change_dt - "01:00:00")
as.character(first_phase_change_dt - phase_change_time + "12:00:00")
first_phase_change_dt - phase_change_time
first_phase_change_dt - phase_change_time + "12:00:00"
first_phase_change_dt
first_phase_change_dt - phase_change_time
first_phase_change_dt
phase_change_time
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
tail(phase)
tail(phase,20)
runApp()
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
en[length(en)]
len - dark_intervals
len
en[length(en)] +dark_intervals
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
phase
phase
runApp('Google Drive/programming/fwr')
start_phase
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
start_phase
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
start_phase
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
grepl("^[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", "22:00:00")
grepl("^[0-1][0-9]|2[0-3]:[0-5][0-9]:[0-5][0-9]$", "22:00:00")
runApp('Google Drive/programming/fwr')
phase_change_diff
runApp('Google Drive/programming/fwr')
phase_change_diff
first_phase_change_dt
phase_change_time
tms
init_phase_count
phase
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
x
runApp('Google Drive/programming/fwr')
night_start
night_end
as.numeric(as.difftime(c(night_start, "00:00:00")
)
)
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1]))
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
phase_change_diff
first_phase_change_dt
phase_change_time
tms[init_phase_count + 1]
tms
phase
init_phase_count
runApp('Google Drive/programming/fwr')
phase_change_diff
first_phase_change_dt
phase_change_time
first_phase_change_dt - phase_change_time
first_phase_change_dt - phase_change_time + "12:00:00"
runApp()
runApp('Google Drive/programming/fwr')
first_phase_change_dt - phase_change_time + "24:00:00"
phase_change_diff
first_phase_change_dt - phase_change_time
first_phase_change_dt - phase_change_time + "24:00:00"
first_phase_change_dt - phase_change_time + "23:00:00"
first_phase_change_dt
phase_change_time
tms
runApp()
runApp('Google Drive/programming/fwr')
results
result
phase
runApp('Google Drive/programming/fwr')
x
x
x
as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1])
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])
as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1]
)
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1]))
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])) %% 24*60*60)
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])) %% 24*60*60
122400 %% 24
11 %% 5
122400 %% 24000
122400 %% 24*60*60
24*60*60
122400 %% 86400
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])) %% (24*60*60)
runApp()
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
first_phase_change_dt
phase_change_time
phase_change_time
first_phase_change_dt
runApp('Google Drive/programming/fwr')
first_phase_change_dt
tms
init_phase_count
first_n_ocurrence(phase)
phase
runApp('Google Drive/programming/fwr')
x
x
ifelse(x >= night_start | x < night_end, "Dark", "Light")
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
rect_start
initial_phase_no
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
tms
first_phase_change_dt
phase
runApp('Google Drive/programming/fwr')
x
x
as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")
)
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1]))
(as.numeric(as.difftime(c(night_start, "00:00:00"), unit = "secs")[1]) +
as.numeric(as.difftime(c(night_duration, "00:00:00"), unit = "secs")[1])) %% (24*60*60)
ifelse(x >= night_start & x < night_end, "Dark", "Light")
x
ifelse(x >= night_start && x < night_end, "Dark", "Light")
ifelse(x >= night_start & x < night_end, "Dark", "Light")
x
ifelse(x >= night_start & x < (night_end + 24*60*60), "Dark", "Light")
x < (night_end + 24*60*60)
x >= night_start
x >= night_start
ifelse(x >= night_start | x < night_end), "Dark", "Light")
ifelse(x >= night_start | x < night_end), "Dark", "Light")
x >= night_start | x < night_end
ifelse(x >= night_start | x < night_end, "Dark", "Light")
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
grepl("^[0-1][0-9]|2[0-3]:[0-5][0-9]:[0-5][0-9]$", "18::00")
grepl("^[0-1][0-9]|2[0-3]:[0-5]{1}[0-9]{1}:[0-5][0-9]$", "18:00:00")
grepl("^[0-1][0-9]|2[0-3]:[0-5]{1}[0-9]{1}:[0-5][0-9]$", "18::00")
grepl("^[0-1][0-9]|2[0-3]:[0-5][0-9]:[0-5][0-9]$", "18::00")
grep("^[0-1][0-9]|2[0-3]:[0-5][0-9]:[0-5][0-9]$", "18::00")
grepl(^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$, "18:00:00")
grepl("^([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)$", "18:00:00")
grepl("^([0-1][:digit:]|2[0-3]):([0-5][:digit:]):([0-5][:digit:])$", "18:00:00")
grepl("^([0-1][:digit:]|2[0-3]):([0-5][:digit:]):([0-5][:digit:])$", "18::00")
grep("^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", "18::00")
grepl("^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", "18::00")
grepl("^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", "18:00:00")
runApp('Google Drive/programming/fwr')
runApp('Google Drive/programming/fwr')
file_reg <- read_excel("temp.xlsx")
library(xlsx)
setwd("/Users/igor/Google Drive/temp/paula_clams_1/")
file_reg <- read_excel("temp.xlsx")
file_tse <- read_excel("tse.xlsx")
library(readxl)
setwd("/Users/igor/Google Drive/temp/paula_clams_1/")
file_reg <- read_excel("temp.xlsx")
file_tse <- read_excel("tse.xlsx")
View(file_reg)
View(file_tse)
View(file_tse)
file_tse <- read_excel("tse.xlsx", header = F)
View(file_tse)
View(file_tse)
?read_excel
file_tse <- read_excel("tse.xlsx", col_names= F)
View(file_tse)
View(file_tse)
?subset
?grep
grep("TSE", file_tse)
grepl("TSE", file_tse)
grepl("TSE", file_tse[1:10,])
grep("TSE", file_tse[1:10,])
grep("TSE", file_tse[1:20,])
grep("TSE", file_tse[1:20,], value = T)
tse_pattern <- "TSE PehnoMaster"
any(grepl("TSE", file_tse[1:20,]))
read_excel
?read_excel
read.xlsx()
file_tse <- read_excel("tse.xlsx", col_names= F, n_max = 20)
file_tse <- read_xlsx("tse.xlsx", col_names= F, n_max = 20)
library(readxl)
?read.xlsx
?read.xlsx2
install.packages("readxl")
library(readxl)
file_reg <- read_excel("temp.xlsx")
file_tse <- read_xlsx("tse.xlsx", col_names= F, n_max = 20)
View(file_tse)
View(file_tse)
View(file_tse)
tse_header <- read_xlsx("tse.xlsx", col_names= F, n_max = 50)
View(tse_header)
View(tse_header)
tse_header
head(tse_header, 50)
head(tse_header[20:50,], 50)
date_line <- grep(date_pattern, tse_header)
time_line <- grep(time_pattern, tse_header)
date_pattern <- "Date"
time_pattern <- "Time"
date_line <- grep(date_pattern, tse_header)
time_line <- grep(time_pattern, tse_header)
?grep
date_line <- grep(date_pattern, tse_header)
time_line <- grep(time_pattern, tse_header[,1])
date_line <- grep(date_pattern, tse_header[,1])
tse_header[,1]
grep(date_pattern, tse_header[,1])
which(tse_header == "Date", arr.ind=TRUE)
which(tse_header == "Date", arr.ind=TRUE)["row"]
which(tse_header == "Date", arr.ind=TRUE)[1,1]
header_start <- which(tse_header == "RER", arr.ind=TRUE)[1,1]
header_start <- which(tse_header == "RER", arr.ind=TRUE)[1,1] %>% unname()
library(dplyr)
header_start <- which(tse_header == "RER", arr.ind=TRUE)[1,1] %>% unname()
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1)
View(tse_full)
View(tse_full)
?read_excel
tse_full
View(file_reg)
View(file_reg)
file_reg
tse_full <- tse_full[3, 9, 10, 11, 12, 23, 24, 14, 15, 17, 18, 20]
tse_full <- tse_full[c(3, 9, 10, 11, 12, 23, 24, 14, 15, 17, 18, 20)]
View(tse_full)
View(tse_full)
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1)
cut(tse_full[7], c(0, 10), labels = c("Dark", "Light"))
tse_full[7]
tse_light <- cut(list(tse_full[7]), c(0, 10), labels = c("Dark", "Light"))
list(tse_full[7])
as.numeric(tse_full[7])
unlist(tse_full[7])
unname(unlist(tse_full[7]))
tse_light <- cut(unname(unlist(tse_full[7])), c(0, 10), labels = c("Dark", "Light"))
tse_light <- cut(unname(unlist(tse_full[7])), 10, labels = c("Dark", "Light"))
tse_light <- cut(unname(unlist(tse_full[7])), 10, labels = c("Dark", "Light"))
tse_light <- cut(unname(unlist(tse_full[7])), 2, labels = c("Dark", "Light"))
tse_light
tse_light <- cut(unname(unlist(tse_full[7])), 2)
tse_light <- cut(unname(unlist(tse_full[7])), 2, labels = c("Dark", "Light"))
tse_subject <- paste0("s",tse_full[3])
tse_subject
tse_subject <- lapply(tse_full[3], function(x) {paste0("s",x)})
tse_subject <- vapply(tse_full[3], function(x) {paste0("s",x)}, character(0))
tse_subject <- vapply(tse_full[3], function(x) {paste0("s",x)}, "")
tse_subject <- sapply(tse_full[3], function(x) {paste0("s",x)})
tse_subject
?seq
tse_event_log <- vector(mode="character", length = length(subject))
tse_event_log <- vector(mode="character", length = length(tse_subject))
?read_xlsx
tse_full[2]
as.character(tse_full[2])
c("text", "text", rep("guess", 22))
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("text", "text", rep("guess", 22)))
tse_full
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("numeric", "numeric", rep("guess", 22)))
tse:full
tse_full
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("date", "date", rep("guess", 22)))
tse_full
library(xlsx)
tse_full_2 <- read.xlsx("tse.xlsx", 1)
tse_full_2
tse_full_2 <- read.xlsx("tse.xlsx", 1)
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("numeric", "numeric", rep("guess", 22)))
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("text", "text", rep("guess", 22)))
tse_full
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("numeric", "numeric", rep("guess", 22)))
View(tse_full)
View(tse_full)
tse_date <- tse_full[2]
View(tse_date)
View(tse_date)
format(as.POSIXct(Sys.Date() + tse_date), "%H:%M", tz="UTC")
tse_date[1]
tse_date[1,1]
format(as.POSIXct(Sys.Date() + tse_date[1,1]), "%H:%M:%S", tz="UTC")
format(as.POSIXct(Sys.Date() + unname(unlist(tse_date[1,1]))), "%H:%M:%S", tz="UTC")
tse_time <- unnname(unlist(tse_full[2]))
tse_time <- sapply(tse_time, function(x) {format(as.POSIXct(Sys.Date() + x), "%H:%M:%S", tz="UTC")})
tse_time
tse_time <- unnname(unlist(tse_full[2]))
tse_time <- unname(unlist(tse_full[2]))
tse_time <- sapply(tse_time, function(x) {format(as.POSIXct(Sys.Date() + x), "%H:%M:%S", tz="UTC")})
tse_time
tse_date <- unname(unlist(tse_full[1]))
tse_date
as.Date(tse_date[1], origin = "1970-01-01")
as.Date(tse_date[1)
as.Date(tse_date[1])
as.Date(tse_date[1], origin = "1900-01-01")
as.Date(tse_date[1], origin = "1899-12-31")
as.Date(tse_date[1], origin = "1899-12-30")
tse_date
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("guess", "guess", rep("guess", 22)))
View(tse_header)
View(tse_full)
tse_full_2 <- read.xlsx2("tse.xlsx", 1)
View(tse_full_2)
?read.xlsx2
tse_full_2 <- read.xlsx2("tse.xlsx", 1, startRow = header_start + 1)
tse_full_2 <- read.xlsx2("tse.xlsx", 1, startRow = header_start + 1, endRow = 1000)
tse_full
tse_full <- tse_full[c(3, 9, 10, 11, 12, 23, 24, 14, 15, 17, 18, 20)]
tse_full
tse_full <- read_xlsx("tse.xlsx", col_names= F, skip = header_start + 1, col_types = c("guess", "guess", rep("guess", 22)))
tse_full <- tse_full[c (9, 10, 11, 12, 23, 24, 14, 15, 17, 18, 20)]
tse_full
tse_full
tse_full[1][tse_full[1] == -]
tse_full[1][tse_full[1] == "-"]
tse_full$X__9[tse_full$X__9 == "-"]
tse_full$X__9[tse_full$X__9 == "-"] = NA
tse_full
na.interpolation(tse_full$X__9, option="linear")
install.packages("imputeTS")
library(imputeTS)
na.interpolation(tse_full$X__9, option="linear")
tse_full
na.interpolation(as.numeric(tse_full$X__9), option="linear")
